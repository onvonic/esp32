// BTN_MODE_PIN Kanan To G15 
// BTN_MODE_PIN Kiri GND From HX711
// BTN_MODE_PIN Kiri GND To ESP32
//
// XPW HX711 DT - G5 
// XPW HX711 SCK - G18
// XPW HX711 GND - GND
// XPW HX711 VCC - 3V3
//
// LCD SDA - G25 
// LCD SCL - G26
// LCD VCC - 5V
// LCD GND - GND

#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include "HX711.h"
#include <Preferences.h>

// Pin Definitions
#define LOADCELL_DOUT_PIN 32  // Changed from 5
#define LOADCELL_SCK_PIN  27  // Changed from 18
#define BTN_MODE_PIN 15
#define SDA_PIN 25
#define SCL_PIN 26

// Constants
#define WEIGHT_OF_OBJECT_FOR_CALIBRATION 1000

// Variables
int weight_In_g = 0;
int last_weight_In_g = 0;
float weight_In_kg = 0.0;
float LOAD_CALIBRATION_FACTOR = 0.0;

// Objects
LiquidCrystal_I2C lcd(0x27, 16, 2);
HX711 LOADCELL_HX711;
Preferences preferences;

// Function Prototypes
void scanI2CDevices();
void scale_Tare();
void loadcell_Calibration();
float getAverageWeight(int num_samples);

void setup() {
  Serial.begin(115200);
  Serial.println("Starting setup...");
  
  Wire.begin(SDA_PIN, SCL_PIN);
  Serial.println("Wire initialized");
  
  scanI2CDevices();
  
  pinMode(BTN_MODE_PIN, INPUT_PULLUP);
  
  preferences.begin("CF", false);
  LOAD_CALIBRATION_FACTOR = preferences.getFloat("CFVal", 0);
  Serial.println("Calibration factor loaded: " + String(LOAD_CALIBRATION_FACTOR));
  
  lcd.init();
  lcd.backlight();
  Serial.println("LCD initialized");
  
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("LCD OK");
  Serial.println("LCD test message displayed");
  delay(2000);
  
  LOADCELL_HX711.begin(LOADCELL_DOUT_PIN, LOADCELL_SCK_PIN);
  LOADCELL_HX711.set_scale(LOAD_CALIBRATION_FACTOR);
  LOADCELL_HX711.tare();
  Serial.println("HX711 initialized");
  
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Timbangan siap");
  lcd.setCursor(0, 1);
  lcd.print("digunakan");
  Serial.println("Scale ready message displayed");
  delay(2000);
  lcd.clear();
  
  Serial.println("Setup complete");
}

void loop() {
  weight_In_g = getAverageWeight(10);
  weight_In_kg = float(weight_In_g) / 1000;

  if (last_weight_In_g != weight_In_g) {
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Weight:");
    
    lcd.setCursor(0, 1);
    lcd.print(weight_In_kg, 2);
    lcd.print(" kg");
    
    Serial.print("Weight: ");
    Serial.print(weight_In_kg, 2);
    Serial.println(" kg");
  }

  last_weight_In_g = weight_In_g;

  if (digitalRead(BTN_MODE_PIN) == LOW) {
    byte btn_mode_cnt = 0;

    while (digitalRead(BTN_MODE_PIN) == LOW) {
      btn_mode_cnt++;
      if (btn_mode_cnt > 3) {
        loadcell_Calibration();
        break;
      }
      delay(1000);
    }
    if (btn_mode_cnt < 3) scale_Tare();
  }
}

void scanI2CDevices() {
  byte error, address;
  int nDevices = 0;

  Serial.println("Scanning I2C devices...");

  for(address = 1; address < 127; address++ ) {
    Wire.beginTransmission(address);
    error = Wire.endTransmission();

    if (error == 0) {
      Serial.print("I2C device found at address 0x");
      if (address < 16) Serial.print("0");
      Serial.print(address, HEX);
      Serial.println("  !");
      nDevices++;
    }
    else if (error == 4) {
      Serial.print("Unknown error at address 0x");
      if (address < 16) Serial.print("0");
      Serial.println(address, HEX);
    }    
  }
  if (nDevices == 0)
    Serial.println("No I2C devices found\n");
  else
    Serial.println("I2C scan complete\n");
}

void scale_Tare() {
  Serial.println("Starting tare process...");
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Tare...");
  delay(1000);

  if (LOADCELL_HX711.is_ready()) {
    LOADCELL_HX711.tare();
    Serial.println("Tare complete");
  } else {
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Error: HX711");
    lcd.setCursor(0, 1);
    lcd.print("tidak ditemukan");
    Serial.println("Error: HX711 not found");
    while (1) {
      delay(1000);
    }
  }
}

void loadcell_Calibration() {
  Serial.println("Starting calibration process...");
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Calibrating...");
  lcd.setCursor(0, 1);
  lcd.print("Please wait");

  LOADCELL_HX711.set_scale();
  LOADCELL_HX711.tare();

  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Place known");
  lcd.setCursor(0, 1);
  lcd.print("weight on scale");

  delay(5000);

  long reading = LOADCELL_HX711.get_units(10);
  
  if (reading != 0) {
    LOAD_CALIBRATION_FACTOR = float(reading) / WEIGHT_OF_OBJECT_FOR_CALIBRATION;
    LOADCELL_HX711.set_scale(LOAD_CALIBRATION_FACTOR);
    
    preferences.putFloat("CFVal", LOAD_CALIBRATION_FACTOR);
    
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Calibration");
    lcd.setCursor(0, 1);
    lcd.print("Complete");
    
    Serial.println("Calibration complete. Factor: " + String(LOAD_CALIBRATION_FACTOR));
  } else {
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Calibration");
    lcd.setCursor(0, 1);
    lcd.print("Failed");
    Serial.println("Calibration failed. Reading was 0.");
  }

  delay(2000);
}

float getAverageWeight(int num_samples) {
  float total_weight = 0;
  for (int i = 0; i < num_samples; i++) {
    if (LOADCELL_HX711.wait_ready_timeout(100)) {
      total_weight += LOADCELL_HX711.get_units(2);
    } else {
      Serial.println("HX711 not found in getAverageWeight");
    }
    delay(10);
  }
  return total_weight / num_samples;
}

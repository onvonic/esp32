#include <WiFi.h>
#include <HTTPClient.h>
#include <ArduinoJson.h>
#include "DHT.h"

// WiFi credentials
const char* ssid = "sinaga";
const char* password = "1234567890";

// DHT11 setup
#define DHTPIN 16
#define DHTTYPE DHT11
DHT dht(DHTPIN, DHTTYPE);

void setup() {
    Serial.begin(115200);
    dht.begin();

    // Connect to WiFi
    Serial.print("Connecting to ");
    Serial.println(ssid);
    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED) {
        delay(500);
        Serial.print(".");
    }
    Serial.println("");
    Serial.println("WiFi connected.");
    Serial.println("IP address: ");
    Serial.println(WiFi.localIP());
}

void loop() {
    // Read temperature and humidity from DHT11
    float humidity = dht.readHumidity();
    float temperature = dht.readTemperature();

    // Check if any reads failed and exit early (to try again).
    if (isnan(humidity) || isnan(temperature)) {
        Serial.println("Failed to read from DHT sensor!");
        return;
    }

    // Print temperature and humidity
    Serial.print("Temperature: ");
    Serial.print(temperature);
    Serial.print("ÂºC, Humidity: ");
    Serial.print(humidity);
    Serial.println("%");

    // Set up the HTTP client
    HTTPClient http;
    http.begin("https://iot.onvonic.com/api/esp32/dht11/store");
    http.addHeader("Content-Type", "application/json");

    // Create JSON object
    DynamicJsonDocument jsonDoc(1024);
    jsonDoc["code_device"] = "DHT110001";
    jsonDoc["temperature"] = temperature;
    jsonDoc["humidity"] = humidity;

    // Serialize JSON to String
    String jsonData;
    serializeJson(jsonDoc, jsonData);

    // Send POST request
    int httpResponseCode = http.POST(jsonData);
    if (httpResponseCode > 0) {
        String response = http.getString();
        Serial.println("Response:");
        Serial.println(response);
    } else {
        Serial.print("Error in HTTP request. HTTP Response code: ");
        Serial.println(httpResponseCode);
    }

    http.end(); // Free the resources

    delay(60000); // Delay for 5 seconds before next measurement
}

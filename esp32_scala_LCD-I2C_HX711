// BTN_MODE_PIN Kanan To G15 
// BTN_MODE_PIN Kiri GND From HX711
// BTN_MODE_PIN Kiri GND To ESP32
//
// XPW HX711 DT - G5 
// XPW HX711 SCK - G18
// XPW HX711 GND - GND
// XPW HX711 VCC - 3V3
//
// LCD SDA - G21 
// LCD SCL - G22
// LCD VCC - 5V
// LCD GND - GND
// ----------------------------------------
// Memasukkan library yang diperlukan.
// ----------------------------------------
#include <LiquidCrystal_I2C.h>  // Library untuk LCD I2C
#include "HX711.h"              // Library untuk sensor berat HX711
#include <Preferences.h>        // Library untuk menyimpan data di memori flash
// ----------------------------------------
// Mendefinisikan PIN yang terhubung antara HX711 dan ESP32.
// ----------------------------------------
#define LOADCELL_DOUT_PIN 5
#define LOADCELL_SCK_PIN  18
//----------------------------------------

// Mendefinisikan PIN untuk tombol MODE.
#define BTN_MODE_PIN 15
// Mendefinisikan berat objek yang diketahui untuk proses kalibrasi (dalam gram).
#define weight_of_object_for_calibration 1000
// Variabel untuk menyimpan hasil penimbangan.
int weight_In_g;        // Berat dalam gram
int last_weight_In_g;   // Berat terakhir dalam gram
float weight_In_kg;     // Berat dalam kilogram

// Inisialisasi LCD I2C (alamat 0x27, 16 kolom x 2 baris).
LiquidCrystal_I2C lcd(0x27, 16, 2);
// Inisialisasi objek HX711.
HX711 LOADCELL_HX711;
// Inisialisasi objek Preferences untuk menyimpan data kalibrasi.
Preferences preferences;

// Variabel untuk menyimpan faktor kalibrasi.
float LOAD_CALIBRATION_FACTOR;
// -----------------------------------------------------------------------------------------
// scale_Tare()
// -----------------------------------------------------------------------------------------
void scale_Tare() {
  // Fungsi untuk melakukan tare (mengatur berat ke nol)
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Tare...");
  delay(1000);

  if (LOADCELL_HX711.is_ready()) {
    LOADCELL_HX711.tare(); 
    // Mengatur skala ke 0.
  } else {
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Error: HX711");
    lcd.setCursor(0, 1);
    lcd.print("tidak ditemukan");
    while (1) {
      delay(1000);
    }
  }
}
// -----------------------------------------------------------------------------------------
// loadcell_Calibration()
// -----------------------------------------------------------------------------------------
void loadcell_Calibration() {
  // Fungsi untuk melakukan kalibrasi loadcell
  // ... (kode kalibrasi tetap sama)
}
// -----------------------------------------------------------------------------------------
// Fungsi untuk mengambil rata-rata pembacaan berat
// -----------------------------------------------------------------------------------------
float getAverageWeight(int num_samples = 10) {
  float total_weight = 0;
  for (int i = 0; i < num_samples; i++) {
    if (LOADCELL_HX711.wait_ready_timeout(100)) {
      total_weight += LOADCELL_HX711.get_units(2); // Ambil 2 pembacaan rata-rata
    }
    delay(10); // Penundaan kecil antar pembacaan
  }
  return total_weight / num_samples;
}
// -----------------------------------------------------------------------------------------
// VOID SETUP()
// -----------------------------------------------------------------------------------------
void setup() {
  // Kode setup
  Serial.begin(115200);
  pinMode(BTN_MODE_PIN, INPUT_PULLUP);
  // Membuka Preferences untuk menyimpan data kalibrasi
  preferences.begin("CF", false);
  LOAD_CALIBRATION_FACTOR = preferences.getFloat("CFVal", 0);
  // Inisialisasi LCD
  lcd.init();
  lcd.backlight();
  // Inisialisasi HX711
  LOADCELL_HX711.begin(LOADCELL_DOUT_PIN, LOADCELL_SCK_PIN);
  LOADCELL_HX711.set_scale(LOAD_CALIBRATION_FACTOR);
  LOADCELL_HX711.tare();
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Timbangan siap");
  lcd.setCursor(0, 1);
  lcd.print("digunakan");
  delay(2000);
  lcd.clear();
}
// --------------------------------------------------------------------------------
// VOID LOOP()
// --------------------------------------------------------------------------------
void loop() {
  // Membaca berat dari sensor dengan rata-rata
  weight_In_g = getAverageWeight(10); // Mengambil rata-rata dari 10 pembacaan
  weight_In_kg = float(weight_In_g) / 1000;

  // Memperbarui tampilan LCD jika berat berubah
  if (last_weight_In_g != weight_In_g) {
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Weight:");
    
    // Menampilkan berat dalam kg dengan format yang sesuai pada LCD
    lcd.setCursor(0, 1);
    lcd.print(weight_In_kg, 2);  // Mengatur 2 angka di belakang koma
    lcd.print(" kg");
    
    // Menampilkan berat dalam kg pada Serial Monitor
    Serial.print("Weight: ");
    Serial.print(weight_In_kg, 2);  // Mengatur 2 angka di belakang koma
    Serial.println(" kg");
  }

  last_weight_In_g = weight_In_g;

  // Mengecek tombol MODE untuk tare atau kalibrasi
  if (digitalRead(BTN_MODE_PIN) == LOW) {
    byte btn_mode_cnt = 0;

    while (digitalRead(BTN_MODE_PIN) == LOW) {
      btn_mode_cnt++;
      if (btn_mode_cnt > 3) {
        loadcell_Calibration();
        break;
      }
      delay(1000);
    }
    if (btn_mode_cnt < 3) scale_Tare();
  }
}

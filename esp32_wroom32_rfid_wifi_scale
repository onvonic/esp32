// BTN_MODE_PIN Kanan To G15 
// BTN_MODE_PIN Kiri GND From HX711
// BTN_MODE_PIN Kiri GND To ESP32
//
// XPW HX711 DT  - G32 
// XPW HX711 SCK - G27
// XPW HX711 GND - GND
// XPW HX711 VCC - 3V3
//
// LCD SDA - G25 
// LCD SCL - G26
// LCD VCC - 5V
// LCD GND - GND

// | RC522 (RFID) | ESP32 DEVKIT V1 |
// |--------------|-----------------|
// | 3v3          | 3v3             |
// | RST          | G22             |
// | GND          | GND             |
// | MISO         | G19             |
// | MOSI         | G23             |
// | SCK          | G18             |
// | SDA          | G21             |


#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include "HX711.h"
#include <Preferences.h>

#include <SPI.h>
#include <MFRC522.h>
#include <WiFi.h>
#include <HTTPClient.h>
#include <ArduinoJson.h>

// Pin Definitions
#define LOADCELL_DOUT_PIN 32
#define LOADCELL_SCK_PIN  27
#define BTN_MODE_PIN 15
#define SDA_PIN 25
#define SCL_PIN 26

#define RST_PIN         22
#define SS_PIN          21
#define SCK_PIN         18
#define MISO_PIN        19
#define MOSI_PIN        23

// Constants
#define WEIGHT_OF_OBJECT_FOR_CALIBRATION 1000
#define WEIGHT_THRESHOLD 0.1
#define STABLE_READINGS 5

// Variables
int weight_In_g = 0;
int last_weight_In_g = 0;
float weight_In_kg = 0.0;
float LOAD_CALIBRATION_FACTOR = 0.0;
float stable_weight = 0.0;
int stable_count = 0;
bool weight_locked = false;

// Objects
LiquidCrystal_I2C lcd(0x27, 16, 2);
HX711 LOADCELL_HX711;
Preferences preferences;
MFRC522 mfrc522(SS_PIN, RST_PIN);

const char* ssid = "ETHAN";
const char* password = "000000008";
const char* apiEndpoint = "https://scale.staging.onvonic.com/api/history/scale/store";
bool isWifiConnected = false;

void setup() {
  Serial.begin(115200);
  
  Wire.begin(SDA_PIN, SCL_PIN);
  pinMode(BTN_MODE_PIN, INPUT_PULLUP);
  
  preferences.begin("CF", false);
  LOAD_CALIBRATION_FACTOR = preferences.getFloat("CFVal", 0);
  
  lcd.init();
  lcd.backlight();
  
  // Check HX711 connection
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Load HX711....");
  
  LOADCELL_HX711.begin(LOADCELL_DOUT_PIN, LOADCELL_SCK_PIN);
  delay(1000);
  
  if (LOADCELL_HX711.is_ready()) {
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("HX711 connected");
    delay(1000);
    
    LOADCELL_HX711.set_scale(LOAD_CALIBRATION_FACTOR);
    LOADCELL_HX711.tare();
  } else {
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("HX711 not found!");
    while(1) delay(1000);
  }
  
  // Initialize RFID and attempt WiFi connection in background
  initializeRFID();
  connectToWifi();
  
  lcd.clear();
}

void loop() {
  weight_In_g = getAverageWeight(10);
  weight_In_kg = float(weight_In_g) / 1000;

  // Handle weight measurement
  if (weight_In_kg < WEIGHT_THRESHOLD) {
    weight_In_kg = 0.00;
    stable_weight = 0.00;
    stable_count = 0;
    weight_locked = false;
  } else if (!weight_locked) {
    if (abs(weight_In_kg - stable_weight) < 0.05) {
      stable_count++;
      if (stable_count >= STABLE_READINGS) {
        weight_locked = true;
      }
    } else {
      stable_weight = weight_In_kg;
      stable_count = 0;
    }
  }

  // Update LCD display
  if (weight_locked || abs(last_weight_In_g - weight_In_g) > 10) {
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Weight: ");
    lcd.print(weight_locked ? stable_weight : weight_In_kg, 2);
    lcd.print("kg");
    
    // Show WiFi status on second line
    lcd.setCursor(0, 1);
    if (isWifiConnected) {
      lcd.print("Network connected");
    }
    
    last_weight_In_g = weight_In_g;
  }

  // Handle calibration button
  if (digitalRead(BTN_MODE_PIN) == LOW) {
    byte btn_mode_cnt = 0;
    while (digitalRead(BTN_MODE_PIN) == LOW) {
      btn_mode_cnt++;
      if (btn_mode_cnt > 3) {
        loadcell_Calibration();
        break;
      }
      delay(1000);
    }
    if (btn_mode_cnt < 3) scale_Tare();
  }

  // Handle RFID card reading
  if (mfrc522.PICC_IsNewCardPresent() && mfrc522.PICC_ReadCardSerial()) {
    String cardUUID = "";
    for (byte i = 0; i < mfrc522.uid.size; i++) {
      cardUUID += (mfrc522.uid.uidByte[i] < 0x10 ? "0" : "");
      cardUUID += String(mfrc522.uid.uidByte[i], HEX);
    }
    
    if (isWifiConnected) {
      lcd.setCursor(0, 1);
      lcd.print("Sending data...  ");
      checkUUIDWithAPI(cardUUID, weight_locked ? stable_weight : weight_In_kg);
    }
    
    mfrc522.PICC_HaltA();
    mfrc522.PCD_StopCrypto1();
    delay(1000);
  }

  // Attempt to reconnect WiFi if disconnected
  if (!isWifiConnected && WiFi.status() != WL_CONNECTED) {
    connectToWifi();
    delay(5000);
  }
}

void scale_Tare() {
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Tare...");
  delay(1000);

  if (LOADCELL_HX711.is_ready()) {
    LOADCELL_HX711.tare();
    lcd.clear();
  } else {
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("HX711 Error!");
    while (1) delay(1000);
  }
}

void loadcell_Calibration() {
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Calibrating...");

  LOADCELL_HX711.set_scale();
  LOADCELL_HX711.tare();

  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Place 1kg weight");
  delay(5000);

  long reading = LOADCELL_HX711.get_units(10);
  
  if (reading != 0) {
    LOAD_CALIBRATION_FACTOR = float(reading) / WEIGHT_OF_OBJECT_FOR_CALIBRATION;
    LOADCELL_HX711.set_scale(LOAD_CALIBRATION_FACTOR);
    preferences.putFloat("CFVal", LOAD_CALIBRATION_FACTOR);
    
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Calibration OK");
    delay(2000);
  } else {
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Calibration Fail");
    delay(2000);
  }
  lcd.clear();
}

float getAverageWeight(int num_samples) {
  float total_weight = 0;
  for (int i = 0; i < num_samples; i++) {
    if (LOADCELL_HX711.wait_ready_timeout(100)) {
      total_weight += LOADCELL_HX711.get_units(2);
    }
    delay(10);
  }
  return total_weight / num_samples;
}

void connectToWifi() {
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  
  int attempts = 0;
  while (WiFi.status() != WL_CONNECTED && attempts < 30) {
    delay(1000);
    attempts++;
  }
  
  isWifiConnected = (WiFi.status() == WL_CONNECTED);
}

void initializeRFID() {
  SPI.begin(SCK_PIN, MISO_PIN, MOSI_PIN, SS_PIN); 
  mfrc522.PCD_Init();
}

void checkUUIDWithAPI(String uuid, float formattedWeight) {
  HTTPClient http;
  
  http.begin(apiEndpoint);
  http.addHeader("Content-Type", "application/x-www-form-urlencoded");
  String postData = "rfid_code=" + uuid + "&body_weight=" + String(formattedWeight, 1);
  
  int httpResponseCode = http.POST(postData);
  
  lcd.setCursor(0, 1);
  if (httpResponseCode > 0) {
    String payload = http.getString();
    DynamicJsonDocument jsonDoc(1024);
    DeserializationError error = deserializeJson(jsonDoc, payload);
    
    if (!error && jsonDoc["status"]) {
      lcd.print("Send success    ");
    } else {
      lcd.print("Error: ");
      lcd.print(httpResponseCode);
    }
  } else {
    lcd.print("HTTP Error: ");
    lcd.print(httpResponseCode);
  }
  
  http.end();
  delay(2000);
}

// LIBRARY 
// - MFRC522 by github community
//
// | RC522 (RFID) | ESP32 DEVKIT V1 |
// |--------------|-----------------|
// | 3v3          | 3v3             |
// | RST          | G22             |
// | GND          | GND             |
// | MISO         | G19             |
// | MOSI         | G23             |
// | SCK          | G18             |
// | SDA          | G21             |

#include <SPI.h>
#include <MFRC522.h>
#include <WiFi.h>
#include <HTTPClient.h>
#include <ArduinoJson.h>

#define RST_PIN         22
#define SS_PIN          21
#define SCK_PIN         18
#define MISO_PIN        19
#define MOSI_PIN        23

MFRC522 mfrc522(SS_PIN, RST_PIN);

const char* ssid = "ETHAN";
const char* password = "000000008";
const char* apiEndpoint = "https://iot.onvonic.com/rfid.php";

bool isWifiConnected = false;

void setup() {
  Serial.begin(115200);
  while (!Serial);
  Serial.println("ESP32 starting up...");
  
  // Connect to WiFi
  connectToWifi();

  // Initialize RFID reader
  initializeRFID();
}

void connectToWifi() {
  Serial.println("Connecting to WiFi...");
  WiFi.mode(WIFI_STA);
  WiFi.disconnect(true);
  delay(1000);
  
  WiFi.begin(ssid, password);
  
  int attempts = 0;
  while (WiFi.status() != WL_CONNECTED && attempts < 30) {
    delay(1000);
    Serial.print(".");
    attempts++;
    if (attempts % 5 == 0) {
      Serial.println();
      Serial.printf("Connection attempt %d, WiFi status: %d\n", attempts, WiFi.status());
    }
  }
  
  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("\nWiFi connected successfully");
    Serial.print("IP address: ");
    Serial.println(WiFi.localIP());
    isWifiConnected = true;
  } else {
    Serial.println("\nFailed to connect to WiFi.");
    Serial.printf("Final WiFi status: %d\n", WiFi.status());
    Serial.println("Please check your credentials, WiFi signal, or try alternative connection method.");
    isWifiConnected = false;
  }
}

void initializeRFID() {
  SPI.begin(SCK_PIN, MISO_PIN, MOSI_PIN, SS_PIN); 
  mfrc522.PCD_Init();
  Serial.println("RFID Reader initialized. Scan a card to read its UUID.");
}

void loop() {
  if (!isWifiConnected && WiFi.status() != WL_CONNECTED) {
    Serial.println("WiFi not connected. Attempting to reconnect...");
    connectToWifi();
    delay(5000);  // Wait 5 seconds before trying again
    return;
  }

  // Reset the loop if no new card present
  if (!mfrc522.PICC_IsNewCardPresent() || !mfrc522.PICC_ReadCardSerial()) {
    delay(50);
    return;
  }

  // Read and display UUID
  String cardUUID = "";
  Serial.print("Card UUID: ");
  for (byte i = 0; i < mfrc522.uid.size; i++) {
    cardUUID += (mfrc522.uid.uidByte[i] < 0x10 ? "0" : "");
    cardUUID += String(mfrc522.uid.uidByte[i], HEX);
    Serial.print(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " ");
    Serial.print(mfrc522.uid.uidByte[i], HEX);
  }
  Serial.println();

  // Check UUID with API
  checkUUIDWithAPI(cardUUID);

  // Halt PICC and stop encryption on PCD
  mfrc522.PICC_HaltA();
  mfrc522.PCD_StopCrypto1();
  delay(1000);  // Delay before next read
}

void checkUUIDWithAPI(String uuid) {
  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;
    String url = String(apiEndpoint) + "?id=" + uuid;
    
    Serial.print("Sending request to: ");
    Serial.println(url);
    
    http.begin(url);
    int httpResponseCode = http.GET();
    
    if (httpResponseCode > 0) {
      String payload = http.getString();
      Serial.println("API Response:");
      Serial.println(payload);
      
      DynamicJsonDocument jsonDoc(1024);
      DeserializationError error = deserializeJson(jsonDoc, payload);
      
      if (!error) {
        bool status = jsonDoc["status"];
        String message = jsonDoc["message"];
        
        Serial.print("Status: ");
        Serial.println(status);
        Serial.print("Message: ");
        Serial.println(message);
      } else {
        Serial.println("Error parsing JSON");
      }
    } else {
      Serial.print("HTTP Error code: ");
      Serial.println(httpResponseCode);
    }
    
    http.end();
  } else {
    Serial.println("WiFi Disconnected");
    isWifiConnected = false;
  }
}
